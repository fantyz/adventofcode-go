package main

import (
	"fmt"
	"strconv"
	"strings"
)

func main() {
	fmt.Println("Advent of code 2016: Day 24")

	l := NewLabyrinth(puzzleInput)
	l.Print()
	fmt.Println("Part 1: Shorest path is", l.ShortestPath(), "steps")
}

func NewLabyrinth(layout string) *Labyrinth {
	l := &Labyrinth{
		waypoints: map[int]Pos{},
	}
	for y, line := range strings.Split(layout, "\n") {
		l.walls = append(l.walls, []bool{})
		for x := range line {
			switch line[x] {
			case '#':
				l.walls[y] = append(l.walls[y], true)
			default:
				i, err := strconv.Atoi(string(line[x]))
				if err != nil {
					panic("Unknown character: " + string(line[x]))
				}
				l.waypoints[i] = Pos{x: x, y: y}
				fallthrough
			case '.':
				l.walls[y] = append(l.walls[y], false)
			}
		}
	}
	return l
}

type Labyrinth struct {
	walls     [][]bool
	waypoints map[int]Pos
}

func (l *Labyrinth) ShortestPath() int {
	// find shortest path between all points and build a graph
	wps := []int{}
	for i := range l.waypoints {
		wps = append(wps, i)
	}

	dist := map[int]map[int]int{}
	for f := 0; f < len(wps); f++ {
		for t := f + 1; t < len(wps); t++ {
			if _, ok := dist[f]; !ok {
				dist[f] = make(map[int]int)
			}
			if _, ok := dist[t]; !ok {
				dist[t] = make(map[int]int)
			}

			dist[f][t] = l.ShortestAB(f, t)
			dist[t][f] = dist[f][t]
		}
	}

	for i := 0; i < len(wps); i++ {
		if wps[i] == 0 {
			if i < len(wps)-1 {
				wps[i] = wps[len(wps)-1]
			}
			wps = wps[:len(wps)-1]
		}
	}

	best := 999999
	for i := 1; i < len(wps); i++ {
		l := dist[0][wps[i]] + shortestFunc(wps, dist)
		if best > l {
			best = l
		}
	}

	return best
}

func shortestFunc(wps []int, dist map[int]map[int]int) int {
	best := 9999999
	if len(wps) < 2 {
		panic("fail")
	}
	if len(wps) == 2 {
		return dist[wps[0]][wps[1]]
	}
	for i := 0; i < len(wps); i++ {
		for j := 0; j < len(wps); j++ {
			if i == j {
				continue
			}
			new := make([]int, len(wps))
			copy(new, wps)
			if i < len(new)-1 {
				new[i] = new[len(new)-1]
			}
			new = new[:len(new)-1]

			l := dist[wps[i]][wps[j]] + shortestFunc(new, dist)
			if best > l {
				best = l
			}
		}
	}

	return best
}

func (l *Labyrinth) ShortestAB(from, to int) int {
	visited := map[Pos]struct{}{}
	next := []Pos{l.waypoints[from]}
	visitNext := func() {
		newNext := []Pos{}
		for _, p := range next {
			if p == l.waypoints[to] {
				// done
				next = nil
				return
			}

			up := p
			up.y += 1
			if _, been := visited[up]; !been && up.y < len(l.walls) {
				newNext = append(newNext, up)
				visited[up] = struct{}{}
			}

			down := p
			down.y -= 1
			if _, been := visited[down]; !been && down.y >= 0 {
				newNext = append(newNext, down)
				visited[down] = struct{}{}
			}

			right := p
			right.x += 1
			if _, been := visited[right]; !been && right.x < len(l.walls[0]) {
				newNext = append(newNext, right)
				visited[right] = struct{}{}
			}

			left := p
			left.x -= 1
			if _, been := visited[left]; !been && left.x >= 0 {
				newNext = append(newNext, left)
				visited[left] = struct{}{}
			}
		}
		if len(newNext) <= 0 {
			panic("No solution found")
		}
		next = newNext
	}

	steps := 0
	for len(next) > 0 {
		steps++
		visitNext()
	}

	return steps - 1
}

func (l *Labyrinth) Print() {
	for y := 0; y < len(l.walls); y++ {
		for x := 0; x < len(l.walls[y]); x++ {
			found := false
			for i, p := range l.waypoints {
				if p.x == x && p.y == y {
					found = true
					fmt.Printf("%d", i)
				}
			}
			if !found {
				if l.walls[y][x] {
					fmt.Print("#")
				} else {
					fmt.Print(".")
				}
			}
		}
		fmt.Println()
	}
}

type Pos struct {
	x, y int
}

const testpuzzleInput = `###########
#0.1.....2#
#.#######.#
#4.......3#
###########`

const puzzleInput = `#######################################################################################################################################################################################
#.....#.....#.....#...#...#.#...#...............................#.#.......#.#...#...........#...............#.#...#.....#.....#.....#...................#.......#.#.......#.....#...#.#
###.#.#.###.#.#.#.#.###.#.#.###.#.#.#.#.###.###.#.#.#.#.#.#.###.#.#.###.#.#.#####.###.#.###.#.###.###.#.#.###.#.###.#.#.#.###.###.###.#.#.#.#.#.#.#.#.#.#.#.###.#.#.#.#.#.#.#.#.#.###.#
#.#......4#.#.....#...#...#.#...........#...#.#.#...#.#...#...#.#.........#.#.#.........#...........#.............#.....#...#...#.#...#...#...#....3#.....#.....#.............#.......#
#.#####.###.#.#####.#.#.#.#.#.#####.###.###.#.#.###.#.#####.#.#.#.###.#.#.#.#.#.#.#######.#.#.#.#.###.#####.###.#.#.###.###.#.#.#.#.#####.###.###.#.#.###.#.#####.#####.###.#####.###.#
#.#...#.....#.#.#...#.#.#.#.#...........#...#...#.....#...#...#.........#.............#.....#...#...#.........#.#...#.......#.....#.....#...#...#...........#.....#.....#...#...#.#...#
###.#.#.###.#.#.#.#.#.#.#.#.#####.###.###.#.#.###.#######.#.#.###.#.#.###.#######.###.#.#######.#.#####.#.###.#.#####.#.#.#.#.###.#.###.#.#.#.###.###.#.#.###.#.#.###.#.#.#.#.#.###.#.#
#...#.......#.#.#.........#...#.....#.#.....#...#...........#.#...#.....#.#.......................#.......#...#.............#...#...#...#.........#.....#.#...#...#.#.....#.....#.#...#
#.#.###.#.#.#.#.#.#####.###.#.#.###.#.#.#.#.###.###.#####.#.#####.#.###.#.#.#.#.###.#.###.#.#####.#.###.#.#.#.#.#.###.#.#.#.#.#.#####.#.#########.#####.#.#.#.#.#.#.#.###.#####.#.#.###
#...#...#.#.#...........#...#...#...#.........#.#...#.....#...#...#.#...#.....#.....#.....#...#...........#.#.#...#...#.....#.....#.#.......#...........#.#.......#...#.....#...#.#.#.#
#.#.###.#.#.#.#.###.#.###.#.#.#.###.###.#.###.#.#.#.#.#.#.#.#.#.###.#.###.#.#####.#.#.#.#.#####.#.###.###.#.#.#.#####.#####.#.#.#.#.###.#.#.#.#########.#.###.#.###.#.#.#.#.#.#.#.###.#
#...#...#...#.#...#...#.......#...............#.#...#.........#...#.#...#...#.............#.#...#.#.......#.....#...#...#.....#.#...#.........#6..#...#.....#.#.....#...#...#...#.....#
#.#.#.#######.#.#.#.#.#.#####.#.#####.#.#.#.###.#.#.#.#.#.#.#.#.#######.#.###.#.###.#####.#.#.#.#.#.#.#####.#######.#.###.#.#.#.#.#.#.#.###.#####.#.#.###.#####.#####.#.#####.#.#.#.###
#.....#.....#...#.#...#.#...........#...#...#.......#.....#.#.#...#.#.....#.....#.....#.......#.....#.#...#.#...#.......#.........#...#.......#...#.#.....#...#.....#.#.#.#.#.....#...#
###.#.###.#.#.###.#.#.#.#.###.###.#.###.#.#.#.#.###.#.###.#######.#.#.###.#.#.#.#.#.#.#.#######.###.###.#.#.#.#.#.#.#.###.#.#.#.###.#.###.###.#.#.###.#####.#.#.#.#.#.#.#.#.#.###.#####
#.#.#.#.....#...#.#...#...#...#.........#.....#.....#.#...#.......#...#.....#...#...#...#...#.....#...#.#...#.........#.....#.....#.......#.....#.#.....#...#...#...#.#.....#.........#
#.###.#.#.###.#.#.#.#.#.#.###.#####.###.#.###.#.#.#.#.#.#.#.#####.#.#.#.###.#.#.#####.#####.#.#####.#.#.#######.#.#.#.#.#.#.###.#.#.#.#.#.#######.#.###.#.#####.###.###.#.#.#.#.#.###.#
#.....#.#5#...#...#...#.#.....#.........#.....#.#.......#...#.......#.#.......#.#.#...........#.......#...#.#.....#.#.........#...#.#.....#.......#..0#.........#...#.....#.#.....#.#.#
#.###.#.###.#.#.#.#.#.#.###.###.#####.#########.#.#.#.#.###.#.#.###.#.#.#.#.#.###.#.###.#####.#.#.#####.#.#.#.#.###.#######.#####.#########.#.#.#.#.#.#.###.#.#.#.#.#.###.#.#####.#.#.#
#.....#.........#...#...#.........#.....#.......#...#.#.......#.....#.#...#.#.#...#.#.#.....#...............#.#.....#.......#.#.......#.......#.#.....#.#.......#.........#.......#...#
#.###.#.#.#.###.#.###.#########.#.###.#.#.###.#.#.#####.#.#.#.#####.#.#.#.#.###.#.#.#.#.#.###.#.#.#.#.#.###.#.#.#####.#.#.###.#.###.#.#.#####.#.#.#####.#.#.###.#########.#.#.#######.#
#.....#.......................#.#.#...#...#.............#.#.....#...........#...#.#...#.........#.#...#.....#...........#.#.#.......#.#...#.......#.........#.................#.#.....#
#.#.#.#.#.#.#.###.#######.#.#.#.###.#.#.###.#.#.#.#.#.#.#.#.###.#.#.#.#####.#.#.#.#.#.#######.###.#.#.###.#.#######.###.#.#.#####.#.#.#.#.#.#.#.#.#.#.#.#######.#.#####.#.#####.###.#.#
#...#...#...#.......#.#...#.#.#...#.#...........#.#.......#.....#.......#.......#.............#...#.#.#...#.......#.#.....#...#...#.....#.......#.....#...#.....#.........#.....#.#...#
#.#.###.#.#.#.###.#.#.#.#.#.#.###.#.###.###.###.#.#.###.#.#.#.#.#.#.###.#####.#.#.#.###.#.#.#.#.#.#.#.#.#.###.###.#.#.#.#.#.#.#.#.#.###.#.#.#.#.###.###.#.#.###.#####.#.#.#.###.#.#.#.#
#...............#.....#...#...#.....#.........#.....#...#...#.#.........#...........#.#.....#.#.....#...#...#...#.#.........#.....#...#.............#1#...#.#.........#.#...#.......#.#
#####.###.#.#.###.#.#####.#.#.#.###.#.#.#.#.#.#.#.#.#.#.###.###.###.#.###.#.#.###.###.#.#.#.###.#.#.#.###.###.#.#.#.#.#.#.#.###.#.#.#.#.#####.###.#.#.#.#.#.#######.#.#.#.###.#.#.#.###
#.#...........#.....#...#...#.#.........#...#...#.......#.....#.#.....#.........#.#...#...#...#.......#...#.......#.#.#...#.......#...#...............#.........#.......#.#...#.....#.#
#.#.#.#.#.###.#.#.#.#.#.#.#.#.###.###.###.#.#.#.#.#######.#.#.###.#####.###.###.#.#.#.#######.#######.#.###.###.#.#.#.#.#.#.#.#.#.###.###.#.#.#####.#.###.#.#####.#########.###.#.#.#.#
#...........#.....#.......#...#...#...#7..#.....#.......#.....#...#.....#.......#.#...#...#.....#.......#.#.#.....#...............#...#.#...#.#...#.......#.#.#.#...#...#.#.#.....#.#.#
###.###.###.#####.#.#########.#####.#.###.#######.###.#.###.#.###.###.#.###.#.#.#.###.#.#.#.#.#.#.#.#.#.#.#.#####.#.###.#.#####.#.#.#.#.###.#.#.#.#.###.#.#.#.#.###.#.#.#.#####.#.#.#.#
#...#...#.#.......#...........#.......#.....#.#.......#.....#.#...#...#...#...#.......#...#.#.........#.............#...........#.#...#.#...#.#...#...#...#...#...#.#.....#.......#...#
#.###.#.#.#####.#.###.#.#.#####.#.#.#.#.###.#.#.###.#.#.#.###.#.#.#.#.#######.#.###.###.#.###.#####.#.#.#.###.#.#.#.#####.#.#.#.#####.#.#.###.#.#.#.#.#.###.#.###.###.#.#.#.#.#.#.#.###
#.#.....#.#.#.........#...........#...............#...#.#.#.#.#...#...#.........#...#...#.#.#.#...#...#.......#.#.....#.....#...#.#...#.#...........#.....#.#.....#...#.........#.....#
#.#.###.#.#.#.#.#.#.#.#####.#.#.#.#.#.#####.###.###.###.###.###.###.#############.###.###.#.#.#.#.#.#.#.###.#.#.#####.#.#.#######.###.#.#.#.###.#.#.#.#.###.#######.#.#.#.#.###.#####.#
#...#.#.#.#...#.#...#.....#...........#.#...#.......#...........#...#.....#.#...........#.#.....#...#.#...#...#...............#...#...#.#...#...#...#...#.....#2......#...#.#.#.#.....#
#######################################################################################################################################################################################`
